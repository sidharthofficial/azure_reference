from dotenv import load_dotenv
import os
from PIL import Image, ImageDraw
from matplotlib import pyplot as plt
from azure.ai.vision.imageanalysis import ImageAnalysisClient
from azure.ai.vision.imageanalysis.models import VisualFeatures
from azure.core.credentials import AzureKeyCredential

# Initialize the Azure AI Vision client globally after loading credentials
cv_client = None

def main():
    global cv_client

    # Load environment variables
    load_dotenv()
    ai_endpoint = os.getenv('AI_SERVICE_ENDPOINT')
    ai_key = os.getenv('AI_SERVICE_KEY')

    # Authenticate Azure AI Vision client
    if not ai_endpoint or not ai_key:
        print("AI_SERVICE_ENDPOINT or AI_SERVICE_KEY not set in .env file.")
        return

    cv_client = ImageAnalysisClient(
        endpoint=ai_endpoint,
        credential=AzureKeyCredential(ai_key)
    )

    # Menu for text reading functions
    print('\n1: Use Read API for image (Lincoln.jpg)\n2: Read handwriting (Note.jpg)\nAny other key to quit\n')
    command = input('Enter a number: ')

    if command == '1':
        image_file = os.path.join('images', 'Lincoln.jpg')
        GetTextRead(image_file)
    elif command == '2':
        image_file = os.path.join('images', 'Note.jpg')
        GetTextRead(image_file)
    else:
        print("Exiting program.")

def GetTextRead(image_file):
    print('\nProcessing image:', image_file)
    
    try:
        # Open image file
        with open(image_file, "rb") as f:
            image_data = f.read()

        # Use Analyze image function to read text in image
        result = cv_client.analyze(
            image_data=image_data,
            visual_features=[VisualFeatures.READ]
        )

        # Display the image and overlay it with the extracted text
        if result.read is not None:
            print("\nText:")
            
            # Prepare image for drawing
            image = Image.open(image_file)
            fig = plt.figure(figsize=(image.width / 100, image.height / 100))
            plt.axis('off')
            draw = ImageDraw.Draw(image)
            color = 'cyan'
            
            for block in result.read.blocks:
                for line in block.lines:
                    # Display detected text
                    print(f"  {line.text}")
                    r = line.bounding_polygon
                    bounding_polygon = [(point.x, point.y) for point in r]
                    print("   Bounding Polygon:", bounding_polygon)

                    # Draw line bounding polygon
                    draw.polygon(bounding_polygon, outline=color, width=3)

                    # Draw each word's bounding polygon and display confidence
                    for word in line.words:
                        r = word.bounding_polygon
                        bounding_polygon = [(point.x, point.y) for point in r]
                        print(f"    Word: '{word.text}', Bounding Polygon: {bounding_polygon}, Confidence: {word.confidence:.4f}")
                        draw.polygon(bounding_polygon, outline=color, width=2)

            # Save and display the image
            plt.imshow(image)
            plt.tight_layout(pad=0)
            outputfile = 'text.jpg'
            fig.savefig(outputfile)
            print('\n  Results saved in', outputfile)
    except Exception as ex:
        print("An error occurred:", ex)

if __name__ == "__main__":
    main()
